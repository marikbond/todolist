Регистрация
[+] - Страница регистрации с формой
[ ] - Валидация формы регистрации
[ ] - Сохранение данных пользователя
[ ] - Обновить страницу с данными после регистрации

Авторизация
[ ] - Создать страницу с формой для авторизации
[ ] - Валидация и отправка данных авторизации пользвоателя
[ ] - Обработать логику авторизации польвателя на сервере
[ ] - Перенаправить на нужную страницу
[ ] - Кабинет???

Модальные окна:
[+] - Вынести все шаблоны на сервер.

Фильтры:
[&0] - Добавить фильтр по статусу задачи. Выбираешь значение фильтра из списка и нажимаешь кнопку "Искать" и задачи на экране //TODO добавить логики в верстку и спросить что еще добавить


Темы:
- ORM
- Session
- Cookies
- Logging
------------
- Исключения
- Обработка ошибок / (HTTP)
- Архитектуры приложения
- Promises


Удаление задачи:
[+] - после нажатия на кнопку delete отправить запрос на сервер (get)
[+] - открыть соединение с БД
[+] - написать sql запрос на удаление нужного задания по id
[+] - если удаление прошло успешно отправить написать скрипт на удаление задания из html у клиента
[+] - добавить модальное окно с подтверждением удаления задачи

На потом или рефактор:
[&2] - Сделать рефакторинг обращений к базе. Убрать повторяющийся код.
[+]  - Переделать получение главной страницы с использованием async (parallel)
[ ]  - Сделать валидацию на модальной форме
[ ]  - Создать шаблоны для формирования запросов SQL
[&1] - Доделать удаление временных каталогов после сборки проекта.

Добавление новой задачи:
[+] - Написать код, чтобы получить список статусов из БД // write sql request to receive statuses list from data base
[+] - Вставить этот список в разметку // insert received list into html
[+] - Написать запрос в БД который будет добавлять данные // write sql request that is adding data into data base
[+] - На кнопку  save добавить обработчик, который соберет данные в полях и из дропдауна. // add an handler for save button that will take data from the fields and dropdown
[+] - Отправить POST запрос на сервер с данными // send POST request with data to server
[+] - Получить данные на сервере // receive data in server
[+] - На основании полученный данных с формы сформировать запрос на добавление задачи в БД // add data to data base
[+] - Если вставка произошла успешно - отрендерить задачу на сервере и отправить полученный html для вставки задачи на клиенте // if insert into data base went succesfully render new task on server and send html to client
[+] - Получить ответ от сервера с новой задачей  в виде html и вставить на странице // receive server response on client with new task and insert it into the page

Поиск задач:
[+] - На кнопку search повесить обработчик, который будет получать строку запроса с формы;
[ ] - Подменять URL согласно результату поиска на странице; HistoryAPI
[+] - Отправить запрос через ajax на сервер для поиска задач отвечающим запросу;
[+] - Создать новй mapping для нового URL. /search?q=<query-string>, поулчить строку запроса и передать в taskAPI.find;
[+] - Написать запрос в БД для поиска задач по заголовку на основании строки поиска;
[+] - Получить данные из БД по стороне NodeJS, создать объекты Task и передать массив с задачами в callback для taskAPI.find;
[+] - Отрендерить новый html на основании полученных задач и отправить клиенту;
[+] - Получить задачи со стороны клиента и подменить на странице старые задачи на новые.